/**
 * Extension options/settings page component
 * Manages extension configuration with UIKit components
 * @module {{PROJECT_NAME}}
 * @file src/options/OptionsApp.tsx
 * @generated create-uikit v2.0.0
 */

import React, { useState, useEffect } from 'react';
import { ThemeProvider, useTheme } from '@voilajsx/uikit/theme-provider';
import { PageLayout, PageHeader, PageContent } from '@voilajsx/uikit/page';
import { Card, CardContent, CardHeader, CardTitle } from '@voilajsx/uikit/card';
import { Button } from '@voilajsx/uikit/button';
import { Label } from '@voilajsx/uikit/label';
import { Switch } from '@voilajsx/uikit/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@voilajsx/uikit/select';
import { Badge } from '@voilajsx/uikit/badge';
import { Separator } from '@voilajsx/uikit/separator';
import { Save, RotateCcw, Settings, Zap, Sun, Moon } from 'lucide-react';

// Default extension settings
const DEFAULT_SETTINGS = {
  extensionEnabled: true,
  autoMode: false,
  notificationsEnabled: true,
  theme: 'metro',
  themeVariant: 'light',
};

/**
 * Theme selector component for options page
 */
function ThemeSelector() {
  const { theme, variant, setTheme, setVariant } = useTheme();
  
  return (
    <div className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="theme-select">Extension Theme</Label>
        <Select value={theme} onValueChange={setTheme}>
          <SelectTrigger id="theme-select">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="default">Default (Ocean Blue)</SelectItem>
            <SelectItem value="aurora">Aurora (Purple-Green)</SelectItem>
            <SelectItem value="metro">Metro (Gray-Blue)</SelectItem>
            <SelectItem value="neon">Neon (Cyberpunk)</SelectItem>
            <SelectItem value="ruby">Ruby (Red-Gold)</SelectItem>
            <SelectItem value="studio">Studio (Designer)</SelectItem>
          </SelectContent>
        </Select>
        <p className="text-sm text-muted-foreground">
          Choose the color theme for extension interfaces
        </p>
      </div>
      
      <div className="flex items-center justify-between">
        <div className="space-y-0.5">
          <Label htmlFor="dark-mode">Dark Mode</Label>
          <p className="text-sm text-muted-foreground">
            Use dark appearance for extension interfaces
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Sun className="h-4 w-4" />
          <Switch
            id="dark-mode"
            checked={variant === 'dark'}
            onCheckedChange={(checked) => setVariant(checked ? 'dark' : 'light')}
          />
          <Moon className="h-4 w-4" />
        </div>
      </div>
    </div>
  );
}

/**
 * Main options page component
 */
function OptionsContent() {
  const [settings, setSettings] = useState(DEFAULT_SETTINGS);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [saveStatus, setSaveStatus] = useState(''); // 'success' | 'error' | ''

  /**
   * Load settings on component mount
   */
  useEffect(() => {
    loadSettings();
  }, []);

  /**
   * Load current settings from Chrome storage
   */
  const loadSettings = async () => {
    try {
      const stored = await chrome.storage.sync.get(Object.keys(DEFAULT_SETTINGS));
      const userSettings = { ...DEFAULT_SETTINGS, ...stored };
      setSettings(userSettings);
    } catch (error) {
      console.error('Failed to load settings:', error);
      setSaveStatus('error');
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Save settings to Chrome storage
   */
  const saveSettings = async () => {
    setIsSaving(true);
    setSaveStatus('');

    try {
      await chrome.storage.sync.set(settings);
      setSaveStatus('success');
    } catch (error) {
      console.error('Failed to save settings:', error);
      setSaveStatus('error');
    } finally {
      setIsSaving(false);
      
      // Clear status after 3 seconds
      setTimeout(() => setSaveStatus(''), 3000);
    }
  };

  /**
   * Reset settings to defaults
   */
  const resetSettings = () => {
    setSettings(DEFAULT_SETTINGS);
    setSaveStatus('');
  };

  /**
   * Update a specific setting
   */
  const updateSetting = (key, value) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }));
    setSaveStatus(''); // Clear any previous status
  };

  // Extension logo for header
  const logo = (
    <div className="flex items-center gap-3">
      <div className="flex items-center justify-center w-12 h-12 bg-primary rounded-lg">
        <Zap className="w-6 h-6 text-primary-foreground" />
      </div>
      <div>
        <h1 className="text-2xl font-bold">{{PROJECT_NAME}}</h1>
        <p className="text-muted-foreground">Extension Settings</p>
      </div>
    </div>
  );

  if (isLoading) {
    return (
      <PageLayout variant="default" size="lg">
        <PageContent>
          <div className="flex items-center justify-center min-h-64">
            <div className="text-muted-foreground">Loading settings...</div>
          </div>
        </PageContent>
      </PageLayout>
    );
  }

  return (
    <PageLayout variant="default" size="lg">
      <PageHeader variant="default" size="md" className="py-6">
        {logo}
      </PageHeader>

      <PageContent size="md">
        <div className="space-y-6">
          
          {/* General Settings */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="w-5 h-5" />
                General Settings
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Extension enabled toggle */}
              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="extension-enabled">Enable Extension</Label>
                  <p className="text-sm text-muted-foreground">
                    Turn the extension functionality on or off
                  </p>
                </div>
                <Switch
                  id="extension-enabled"
                  checked={settings.extensionEnabled}
                  onCheckedChange={(checked) => updateSetting('extensionEnabled', checked)}
                />
              </div>

              <Separator />

              {/* Auto mode toggle */}
              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="auto-mode">Auto Mode</Label>
                  <p className="text-sm text-muted-foreground">
                    Automatically perform actions when possible
                  </p>
                </div>
                <Switch
                  id="auto-mode"
                  checked={settings.autoMode}
                  onCheckedChange={(checked) => updateSetting('autoMode', checked)}
                  disabled={!settings.extensionEnabled}
                />
              </div>

              <Separator />

              {/* Notifications toggle */}
              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="notifications">Notifications</Label>
                  <p className="text-sm text-muted-foreground">
                    Show notifications for extension actions
                  </p>
                </div>
                <Switch
                  id="notifications"
                  checked={settings.notificationsEnabled}
                  onCheckedChange={(checked) => updateSetting('notificationsEnabled', checked)}
                />
              </div>
            </CardContent>
          </Card>

          {/* Appearance Settings */}
          <Card>
            <CardHeader>
              <CardTitle>Appearance</CardTitle>
            </CardHeader>
            <CardContent>
              <ThemeSelector />
            </CardContent>
          </Card>

          {/* About Section */}
          <Card>
            <CardHeader>
              <CardTitle>About</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-sm">Version</span>
                <Badge variant="secondary">1.0.0</Badge>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm">Extension ID</span>
                <code className="text-xs bg-muted px-2 py-1 rounded">
                  {chrome.runtime.id}
                </code>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm">Built with</span>
                <span className="text-sm text-muted-foreground">VoilaJS UIKit</span>
              </div>
            </CardContent>
          </Card>

          {/* Action buttons */}
          <div className="flex gap-3 justify-end">
            <Button
              variant="outline"
              onClick={resetSettings}
              disabled={isSaving}
              className="gap-2"
            >
              <RotateCcw className="h-4 w-4" />
              Reset to Defaults
            </Button>
            
            <Button
              onClick={saveSettings}
              disabled={isSaving}
              className="gap-2"
            >
              <Save className="h-4 w-4" />
              {isSaving ? 'Saving...' : 'Save Settings'}
            </Button>
          </div>

          {/* Save status */}
          {saveStatus && (
            <div className={`text-center text-sm ${
              saveStatus === 'success' 
                ? 'text-green-600 dark:text-green-400' 
                : 'text-destructive'
            }`}>
              {saveStatus === 'success' 
                ? 'Settings saved successfully!' 
                : 'Failed to save settings. Please try again.'
              }
            </div>
          )}
        </div>
      </PageContent>
    </PageLayout>
  );
}

/**
 * Main options app component with theme provider
 */
export default function OptionsApp() {
  return (
    <ThemeProvider theme="metro" variant="light">
      <div className="min-h-screen bg-background">
        <OptionsContent />
      </div>
    </ThemeProvider>
  );
}