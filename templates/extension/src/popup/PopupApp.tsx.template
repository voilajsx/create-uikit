/**
 * Main popup component for Chrome extension
 * Properly uses STORAGE_KEYS for consistent data access
 * @module {{PROJECT_NAME}}
 * @file src/popup/PopupApp.tsx
 * @generated create-uikit v2.0.0
 */

import React, { useState, useEffect } from 'react';
import { ThemeProvider } from '@voilajsx/uikit/theme-provider';
import { PopupLayout } from '@voilajsx/uikit/popup';
import { Button } from '@voilajsx/uikit/button';
import { Badge } from '@voilajsx/uikit/badge';
import { Input } from '@voilajsx/uikit/input';
import { Card, CardContent, CardHeader, CardTitle } from '@voilajsx/uikit/card';
import { Switch } from '@voilajsx/uikit/switch';
import { Settings, Search, BookOpen } from 'lucide-react';
import { dictionaryAPI } from '../shared/api.js';
import { STORAGE_KEYS } from '../shared/config.js';

export default function PopupApp() {
  const [isEnabled, setIsEnabled] = useState(true);
  const [dictionaryEnabled, setDictionaryEnabled] = useState(true);
  const [theme, setTheme] = useState('default');
  const [searchWord, setSearchWord] = useState('');
  const [result, setResult] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    loadSettings();
  }, []);

  const loadSettings = async () => {
    try {
      // ✅ USING STORAGE_KEYS - proper way
      const stored = await chrome.storage.sync.get([
        STORAGE_KEYS.extensionEnabled,
        STORAGE_KEYS.dictionaryEnabled,
        STORAGE_KEYS.theme
      ]);
      
      setIsEnabled(stored[STORAGE_KEYS.extensionEnabled] !== false);
      setDictionaryEnabled(stored[STORAGE_KEYS.dictionaryEnabled] !== false);
      setTheme(stored[STORAGE_KEYS.theme] || 'default');
    } catch (error) {
      console.error('Failed to load settings:', error);
    }
  };

  const toggleExtension = async (enabled) => {
    setIsEnabled(enabled);
    try {
      // ✅ USING STORAGE_KEYS - proper way
      await chrome.storage.sync.set({ 
        [STORAGE_KEYS.extensionEnabled]: enabled 
      });
    } catch (error) {
      console.error('Failed to save extension state:', error);
    }
  };

  const handleWordSearch = async () => {
    if (!searchWord.trim()) return;
    if (!dictionaryEnabled) {
      setResult('❌ Dictionary search is disabled');
      return;
    }

    setIsLoading(true);
    setResult('');

    try {
      const apiResult = await dictionaryAPI.lookupWord(searchWord);
      
      if (apiResult.data) {
        const { word, definitions } = apiResult.data;
        const firstDef = definitions[0];
        setResult(`📖 **${word}**\n${firstDef.partOfSpeech}\n\n${firstDef.text}`);
      } else {
        setResult(`❌ ${apiResult.error}`);
      }
    } catch (error) {
      setResult('❌ Search failed');
    } finally {
      setIsLoading(false);
    }
  };

  const openOptions = () => {
    chrome.runtime.openOptionsPage();
  };

  return (
    <ThemeProvider theme={theme} variant="light">
      <PopupLayout
        variant="default"
        size="md"
        title="{{PROJECT_NAME}}"
        badge={<Badge variant={isEnabled ? 'default' : 'secondary'}>
          {isEnabled ? 'On' : 'Off'}
        </Badge>}
        headerActions={
          <div className="flex items-center gap-2">
            <Switch
              checked={isEnabled}
              onCheckedChange={toggleExtension}
              size="sm"
            />
            <Button variant="ghost" size="sm" onClick={openOptions}>
              <Settings className="h-4 w-4" />
            </Button>
          </div>
        }
        className="border-0 shadow-none rounded-none"
      >
        <div className="space-y-4">
          
          {/* Dictionary Search */}
          {dictionaryEnabled && (
            <Card>
              <CardHeader className="pb-3">
                <CardTitle className="text-base flex items-center gap-2">
                  <BookOpen className="h-4 w-4" />
                  Dictionary
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex gap-2">
                  <Input
                    placeholder="Enter word..."
                    value={searchWord}
                    onChange={(e) => setSearchWord(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleWordSearch()}
                    className="flex-1"
                  />
                  <Button
                    onClick={handleWordSearch}
                    disabled={!searchWord.trim() || isLoading}
                    size="sm"
                  >
                    <Search className="h-4 w-4" />
                  </Button>
                </div>

                {result && (
                  <div className="text-sm p-3 bg-muted rounded whitespace-pre-line">
                    {result}
                  </div>
                )}

                {isLoading && (
                  <div className="text-sm text-center py-2 text-muted-foreground">
                    Searching...
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* Status */}
          {!dictionaryEnabled && (
            <div className="text-center text-sm text-muted-foreground py-2">
              Dictionary search disabled. Enable in settings.
            </div>
          )}
        </div>
      </PopupLayout>
    </ThemeProvider>
  );
}