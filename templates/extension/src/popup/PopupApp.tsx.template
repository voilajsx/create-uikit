/**
 * Main popup component for Chrome extension
 * Provides extension UI with theme support and functionality showcase
 * @module {{PROJECT_NAME}}
 * @file src/popup/PopupApp.tsx
 * @generated create-uikit v2.0.0
 */

import React, { useState, useEffect } from 'react';
import { ThemeProvider } from '@voilajsx/uikit/theme-provider';
import { PopupLayout } from '@voilajsx/uikit/popup';
import { Button } from '@voilajsx/uikit/button';
import { Badge } from '@voilajsx/uikit/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@voilajsx/uikit/card';
import { Switch } from '@voilajsx/uikit/switch';
import { Separator } from '@voilajsx/uikit/separator';
import { Settings, Zap, Globe, CheckCircle, AlertCircle } from 'lucide-react';

/**
 * Main popup component for the Chrome extension
 * Demonstrates PopupLayout usage and extension functionality
 */
export default function PopupApp() {
  const [isEnabled, setIsEnabled] = useState(true);
  const [currentTab, setCurrentTab] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [actionResult, setActionResult] = useState(null);

  /**
   * Load extension settings and current tab information
   */
  useEffect(() => {
    initializePopup();
  }, []);

  /**
   * Initialize popup with settings and current tab info
   */
  const initializePopup = async () => {
    try {
      // Load extension settings from Chrome storage
      const stored = await chrome.storage.sync.get(['extensionEnabled']);
      setIsEnabled(stored.extensionEnabled !== false);

      // Get current tab information
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
      setCurrentTab(tab);
    } catch (error) {
      console.error('Failed to initialize popup:', error);
    }
  };

  /**
   * Execute main extension functionality
   */
  const handleMainAction = async () => {
    if (!currentTab?.id || !canPerformAction()) return;

    setIsLoading(true);
    setActionResult(null);

    try {
      // Send message to content script
      const response = await chrome.tabs.sendMessage(currentTab.id, {
        action: 'performMainAction',
        enabled: isEnabled
      });

      if (response?.success) {
        setActionResult({ type: 'success', message: 'Action completed successfully!' });
      } else {
        setActionResult({ type: 'error', message: response?.error || 'Action failed' });
      }
    } catch (error) {
      console.error('Action failed:', error);
      setActionResult({ type: 'error', message: 'Could not communicate with page' });
    } finally {
      setIsLoading(false);
      
      // Clear result message after 3 seconds
      setTimeout(() => setActionResult(null), 3000);
    }
  };

  /**
   * Toggle extension enabled state
   */
  const toggleExtension = async (enabled) => {
    setIsEnabled(enabled);
    
    try {
      // Save setting to Chrome storage
      await chrome.storage.sync.set({ extensionEnabled: enabled });
    } catch (error) {
      console.error('Failed to save setting:', error);
    }
  };

  /**
   * Open extension options page
   */
  const openOptions = () => {
    chrome.runtime.openOptionsPage();
  };

  /**
   * Check if current page supports extension actions
   */
  const canPerformAction = () => {
    if (!currentTab?.url) return false;
    
    const unsupportedUrls = ['chrome://', 'chrome-extension://', 'moz-extension://'];
    return !unsupportedUrls.some(prefix => currentTab.url.startsWith(prefix));
  };

  // Extension logo
  const logo = (
    <div className="flex items-center gap-2">
      <div className="flex items-center justify-center w-6 h-6 bg-primary rounded">
        <Zap className="w-3 h-3 text-primary-foreground" />
      </div>
      <span className="font-medium">{{PROJECT_NAME}}</span>
    </div>
  );

  // Status badge
  const statusBadge = (
    <Badge variant={isEnabled && canPerformAction() ? 'default' : 'secondary'}>
      {isEnabled ? (canPerformAction() ? 'Ready' : 'Unavailable') : 'Disabled'}
    </Badge>
  );

  // Header actions
  const headerActions = (
    <Button
      variant="ghost"
      size="sm"
      onClick={openOptions}
      title="Open settings"
      className="h-6 w-6 p-0"
    >
      <Settings className="h-4 w-4" />
    </Button>
  );

  return (
    <ThemeProvider theme="metro" variant="light">
      <PopupLayout
        variant="default"
        size="md"
        logo={logo}
        badge={statusBadge}
        headerActions={headerActions}
        subtitle="Chrome Extension"
        className="rounded-none border-0 shadow-none"
      >
        <div className="space-y-4">
          
          {/* Main action */}
          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-base">Extension Control</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              
              {/* Enable/disable toggle */}
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-sm font-medium">Enable Extension</div>
                  <div className="text-xs text-muted-foreground">
                    Activate extension functionality
                  </div>
                </div>
                <Switch
                  checked={isEnabled}
                  onCheckedChange={toggleExtension}
                />
              </div>

              <Separator />

              {/* Main action button */}
              <Button
                onClick={handleMainAction}
                disabled={!isEnabled || !canPerformAction() || isLoading}
                className="w-full"
                variant={isEnabled && canPerformAction() ? 'default' : 'secondary'}
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-2 border-background border-t-transparent mr-2"></div>
                    Processing...
                  </>
                ) : (
                  <>
                    <Zap className="w-4 h-4 mr-2" />
                    Perform Action
                  </>
                )}
              </Button>

              {/* Action result */}
              {actionResult && (
                <div className={`flex items-center gap-2 text-sm ${
                  actionResult.type === 'success' 
                    ? 'text-green-600 dark:text-green-400' 
                    : 'text-destructive'
                }`}>
                  {actionResult.type === 'success' ? (
                    <CheckCircle className="w-4 h-4" />
                  ) : (
                    <AlertCircle className="w-4 h-4" />
                  )}
                  {actionResult.message}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Current page info */}
          {currentTab && (
            <Card>
              <CardContent className="p-3">
                <div className="flex items-center gap-2 text-sm">
                  <Globe className="w-4 h-4 text-muted-foreground" />
                  <div className="flex-1 min-w-0">
                    <div className="font-medium truncate">{currentTab.title}</div>
                    <div className="text-xs text-muted-foreground truncate">
                      {new URL(currentTab.url).hostname}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Status message for unsupported pages */}
          {!canPerformAction() && currentTab && (
            <div className="text-center text-sm text-muted-foreground py-2">
              Extension not available on this page type
            </div>
          )}
        </div>
      </PopupLayout>
    </ThemeProvider>
  );
}